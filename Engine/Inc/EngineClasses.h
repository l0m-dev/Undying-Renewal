/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if _MSC_VER
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Spawned)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(KillCredit)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(InterpolateEnd)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(FootZoneChange)
AUTOGENERATE_NAME(HeadZoneChange)
AUTOGENERATE_NAME(PainTimer)
AUTOGENERATE_NAME(SpeechTimer)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(Expired)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(BotDesireability)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(PlayerTimeout)
AUTOGENERATE_NAME(Possess)
AUTOGENERATE_NAME(UnPossess)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ClientHearSound)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(RenderOverlays)
AUTOGENERATE_NAME(RenderTexture)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(WalkTexture)
AUTOGENERATE_NAME(BroadcastMessage)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(DemoPlaySound)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(LogGameSpecial)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(AlterDestination)
AUTOGENERATE_NAME(SpawnNotification)
AUTOGENERATE_NAME(UpdateTactics)
AUTOGENERATE_NAME(LogGameSpecial2)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(PreSkelAnim)
AUTOGENERATE_NAME(Warped)
AUTOGENERATE_NAME(SeeHatedPawn)
AUTOGENERATE_NAME(HeldPropRequest)
AUTOGENERATE_NAME(SpellCastNotify)
AUTOGENERATE_NAME(ProjectileStrikeNotify)
AUTOGENERATE_NAME(WeaponFireNotify)
AUTOGENERATE_NAME(ChangedWeapon)
AUTOGENERATE_NAME(LoadGameAdd)
AUTOGENERATE_NAME(OwnerDead)
AUTOGENERATE_NAME(ScryeBegin)
AUTOGENERATE_NAME(ScryeEnd)
AUTOGENERATE_NAME(PlayerReady)
AUTOGENERATE_NAME(PostLoadGame)
AUTOGENERATE_NAME(StartLevel)
AUTOGENERATE_NAME(AddSubtitle)

#ifndef NAMES_ONLY

enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_JoyZ                 =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_UnknownEA            =234,
    IK_UnknownEB            =235,
    IK_MWheelUp             =236,
    IK_MWheelDown           =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_JoyPovUp             =240,
    IK_JoyPovDown           =241,
    IK_JoyPovLeft           =242,
    IK_JoyPovRight          =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum ELightSource
{
    LD_Point                =0,
    LD_Plane                =1,
    LD_Ambient              =2,
    LD_MAX                  =3,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_MAX                  =20,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_MAX                  =10,
};
enum EActEffects
{
    ACTFX_FadeIn            =0,
    ACTFX_FadeOut           =1,
    ACTFX_StutterSlow       =2,
    ACTFX_StutterNormal     =3,
    ACTFX_StutterFast       =4,
    ACTFX_OscillateSlow     =5,
    ACTFX_OscillateNormal   =6,
    ACTFX_OscillateFast     =7,
    ACTFX_LightShake        =8,
    ACTFX_NormalShake       =9,
    ACTFX_HardShake         =10,
    ACTFX_Quick             =11,
    ACTFX_Manual            =12,
    ACTFX_MAX               =13,
};
enum EMusicTransition
{
    MTRAN_None              =0,
    MTRAN_Instant           =1,
    MTRAN_Segue             =2,
    MTRAN_Fade              =3,
    MTRAN_FastFade          =4,
    MTRAN_SlowFade          =5,
    MTRAN_MAX               =6,
};
enum ESoundSlot
{
    SLOT_None               =0,
    SLOT_Misc               =1,
    SLOT_Pain               =2,
    SLOT_Interact           =3,
    SLOT_Ambient            =4,
    SLOT_Talk               =5,
    SLOT_Interface          =6,
    SLOT_MAX                =7,
};
enum ETextureType
{
    TID_Default             =0,
    TID_Glass               =1,
    TID_Water               =2,
    TID_Leaves              =3,
    TID_Snow                =4,
    TID_Grass               =5,
    TID_Organic             =6,
    TID_Carpet              =7,
    TID_Earth               =8,
    TID_Sand                =9,
    TID_WoodHollow          =10,
    TID_WoodSolid           =11,
    TID_Stone               =12,
    TID_Metal               =13,
    TID_Extra1              =14,
    TID_Extra2              =15,
    TID_Extra3              =16,
    TID_Extra4              =17,
    TID_Extra5              =18,
    TID_Extra6              =19,
    TID_MAX                 =20,
};
enum EImpactType
{
    IT_FootStep             =0,
    IT_Land                 =1,
    IT_Impact               =2,
    IT_Scuff                =3,
    IT_Slide                =4,
    IT_MAX                  =5,
};
enum EObjectType
{
    OT_Default              =0,
    OT_Dynamite             =1,
    OT_Molotov              =2,
    OT_Bullet               =3,
    OT_Ectoplasm            =4,
    OT_Skull                =5,
    OT_MAX                  =6,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_AlphaBlend          =5,
    STY_Highlight           =6,
    STY_AlphaBlendZ         =7,
    STY_MAX                 =8,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_Particles            =8,
    DT_MAX                  =9,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum ECombine
{
    COMBINE_Replace         =0,
    COMBINE_Stack           =1,
    COMBINE_Modulate        =2,
    COMBINE_MAX             =3,
};
enum EMovement
{
    MOVE_None               =0,
    MOVE_Velocity           =1,
    MOVE_Anim               =2,
    MOVE_AnimAbs            =3,
    MOVE_MAX                =4,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Rolling            =7,
    PHYS_Interpolating      =8,
    PHYS_MovingBrush        =9,
    PHYS_Spider             =10,
    PHYS_Trailer            =11,
    PHYS_Attached           =12,
    PHYS_MAX                =13,
};
#define UCONST_SOUND_NOPANNING 0x1000
#define UCONST_SOUND_NOFALLOFF 0x0800
#define UCONST_SOUND_MUSICINTRO 0x0400
#define UCONST_SOUND_SCRYEONLY 0x0200
#define UCONST_SOUND_NOWATERVOLUME 0x0100
#define UCONST_SOUND_NOWATERPITCH 0x0080
#define UCONST_SOUND_NOSCRYEVOLUME 0x0040
#define UCONST_SOUND_NOSCRYEPITCH 0x0020
#define UCONST_SOUND_VOICEOVER 0x0010
#define UCONST_SOUND_BACKGROUND 0x0008
#define UCONST_SOUND_AMBIENT 0x0004
#define UCONST_SOUND_NOPAUSE 0x0002
#define UCONST_SOUND_LOCKED 0x0001

struct AActor_eventRenderTexture_Parms
{
    class UScriptedTexture* Tex;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPlayerReady_Parms
{
    class APlayerPawn* Player;
};
struct AActor_eventStartLevel_Parms
{
};
struct AActor_eventPostLoadGame_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventBroadcastMessage_Parms
{
    FString Msg;
    BITFIELD bBeep;
    FName Type;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventRenderOverlays_Parms
{
    class UCanvas* Canvas;
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventScryeEnd_Parms
{
    class APlayerPawn* P;
};
struct AActor_eventScryeBegin_Parms
{
    class APlayerPawn* P;
};
struct AActor_eventDemoPlaySound_Parms
{
    class USound* Sound;
    BYTE slot;
    FLOAT Volume;
    BITFIELD bNoOverride;
    FLOAT Radius;
    FLOAT Pitch;
    INT flags;
};
struct AActor_eventTakeDamage_Parms
{
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    FDamageInfo DInfo;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventHeldPropRequest_Parms
{
    INT idx;
    class AActor* ReturnValue;
};
struct AActor_eventInterpolateEnd_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventKillCredit_Parms
{
    class AActor* Other;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
    BYTE TextureID;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventWarped_Parms
{
    FVector OldLocation;
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventExpired_Parms
{
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventSpawned_Parms
{
};
struct AActor_eventAnimEnd_Parms
{
};
class ENGINE_API AActor : public UObject
{
public:
    BITFIELD bStatic:1 GCC_PACK(4);
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bAssimilated:1;
    BITFIELD bTicked:1;
    BITFIELD bIsAMovingBrush:1;
    BITFIELD bIsRenderable:1;
    BITFIELD bLightChanged:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bSpawned:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bIsMover:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bAlwaysTick:1;
    BITFIELD bHighDetail:1;
    BITFIELD bStasis:1;
    BITFIELD bForceStasis:1;
    BITFIELD bIsPawn:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bNetOptional:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bClientAnim:1;
    BITFIELD bSimFall:1;
    BITFIELD bTimedTick:1;
    FLOAT MinTickTime GCC_PACK(4);
    FLOAT TimeSinceTick;
    INT Priority;
    BYTE Physics;
    BYTE Role;
    BYTE RemoteRole;
    INT NetTag;
    class AActor* Owner;
    FName InitialState;
    FName Group;
    FLOAT TimerRate;
    FLOAT TimerCounter;
    FLOAT LifeSpan;
    FName AnimSequence;
    FLOAT LODBias;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FName Tag;
    FName Event;
    class AActor* Target;
    class APawn* Instigator;
    class USound* AmbientSound;
    class AInventory* Inventory;
    class AActor* Base;
    INT BaseJoint;
    FPlace BasePlace;
    FPointRegion Region;
    FName AttachTag;
    FName AttachJointTag;
    BITFIELD bSavable:1 GCC_PACK(4);
    BYTE StandingCount GCC_PACK(4);
    BYTE MiscNumber;
    BYTE LatentByte;
    INT LatentInt;
    FLOAT LatentFloat;
    class AActor* Touching[8];
    class AActor* Deleted;
    INT CollisionTag;
    INT LightingTag;
    INT ExtraTag;
    INT SpecialTag;
    FColor IncidentLight;
    FVector Location;
    FRotator Rotation;
    FVector OldLocation;
    FVector Velocity;
    FRotator RotationRate;
    FRotator DesiredRotation;
    BITFIELD bHiddenEd:1 GCC_PACK(4);
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bMemorized:1;
    BITFIELD bHighlighted:1;
    BITFIELD bEdLocked:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bDifficulty0:1;
    BITFIELD bDifficulty1:1;
    BITFIELD bDifficulty2:1;
    BITFIELD bDifficulty3:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bNet:1;
    BITFIELD bNetSpecial:1;
    BITFIELD bScriptInitialized:1;
    class AActor* HitActor GCC_PACK(4);
    BYTE DrawType;
    BYTE Style;
    class UTexture* Sprite;
    class UTexture* Texture;
    class UTexture* Skin;
    class UMesh* Mesh;
    class UAnimState* AnimState;
    INT ShadowDrawn;
    FLOAT ShadowImportance;
    FLOAT ShadowRange;
    INT CurrentMRMActorData;
    class UMRMActorData* MRMActorData[2];
    FLOAT BoundRenderRadius;
    FLOAT BoundRenderDistance;
    class UModel* Brush;
    FLOAT DrawScale;
    FLOAT PrevDrawScale;
    FVector PrePivot;
    FLOAT ScaleGlow;
    FLOAT VisibilityRadius;
    FLOAT VisibilityHeight;
    BYTE AmbientGlow;
    BYTE Fatness;
    FLOAT SpriteProjForward;
    FLOAT Opacity;
    BITFIELD bUnlit:1 GCC_PACK(4);
    BITFIELD bNoSmooth:1;
    BITFIELD bParticles:1;
    BITFIELD bRandomFrame:1;
    BITFIELD bMeshEnviroMap:1;
    BITFIELD bMeshCurvy:1;
    BITFIELD bFilterByVolume:1;
    BITFIELD bMRM:1;
    BITFIELD bScryeOnly:1;
    BITFIELD bDrawBehindOwner:1;
    BITFIELD bShadowCast:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCarriedItem:1;
    BITFIELD bForcePhysicsUpdate:1;
    BITFIELD bIsSecretGoal:1;
    BITFIELD bIsKillGoal:1;
    BITFIELD bIsItemGoal:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    FLighting Lighting[2] GCC_PACK(4);
    BITFIELD bSoundPositional:1 GCC_PACK(4);
    BITFIELD bSoundLocked:1;
    BYTE SoundRadius GCC_PACK(4);
    BYTE SoundRadiusInner;
    BYTE SoundVolume;
    BYTE SoundPitch;
    INT SoundFlags;
    FLOAT TransientSoundVolume;
    FLOAT TransientSoundRadius;
    INT LastSoundID;
    BYTE ImpactID;
    INT LatentSoundId;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BITFIELD bCollideActors:1 GCC_PACK(4);
    BITFIELD bCollideJoints:1;
    BITFIELD bCollideSkeleton:1;
    BITFIELD bCollideWorld:1;
    BITFIELD bGroundMesh:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BYTE LightType GCC_PACK(4);
    BYTE LightEffect;
    BYTE LightBrightness;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightRadius;
    BYTE LightRadiusInner;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE LightConeInner;
    BYTE VolumeBrightness;
    BYTE VolumeRadius;
    BYTE VolumeFog;
    BITFIELD bSpecialLit:1 GCC_PACK(4);
    BITFIELD bActorShadows:1;
    BITFIELD bCorona:1;
    BITFIELD bLensFlare:1;
    BITFIELD bDarkLight:1;
    BYTE LightSource GCC_PACK(4);
    BITFIELD bBounce:1 GCC_PACK(4);
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    FLOAT Mass GCC_PACK(4);
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    FLOAT NetPriority;
    FLOAT NetUpdateFrequency;
    BITFIELD bNetInitial:1 GCC_PACK(4);
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bNetSee:1;
    BITFIELD bNetHear:1;
    BITFIELD bNetFeel:1;
    BITFIELD bSimulatedPawn:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bShowDebugInfo:1;
    INT LastJointHit GCC_PACK(4);
    class UClass* RenderIteratorClass;
    class URenderIterator* RenderInterface;
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execMoveCacheEntry);
    DECLARE_FUNCTION(execGetCacheEntry);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execUnloadTexture);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execPlayImpactSound);
    DECLARE_FUNCTION(execFinishSound);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execDemoPlaySound);
    DECLARE_FUNCTION(execPlayOwnedSound);
    DECLARE_FUNCTION(execStopSound);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execTraceTexture);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execSetLimbTangible);
    DECLARE_FUNCTION(execApplyMod);
    DECLARE_FUNCTION(execDetachLimb);
    DECLARE_FUNCTION(execDestroyLimb);
    DECLARE_FUNCTION(execAddDynamic);
    DECLARE_FUNCTION(execClearTargets);
    DECLARE_FUNCTION(execClearTarget);
    DECLARE_FUNCTION(execAddTargetRot);
    DECLARE_FUNCTION(execAddTargetPos);
    DECLARE_FUNCTION(execApplyAnim);
    DECLARE_FUNCTION(execGetNotifyTime);
    DECLARE_FUNCTION(execListAnims);
    DECLARE_FUNCTION(execAnimMoveRate);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execGetAnimGroup);
    DECLARE_FUNCTION(execIsAnimResting);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnimSound);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execJointParent);
    DECLARE_FUNCTION(execStaticJointDir);
    DECLARE_FUNCTION(execJointPlace);
    DECLARE_FUNCTION(execJointIndex);
    DECLARE_FUNCTION(execJointName);
    DECLARE_FUNCTION(execNumJoints);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execResetLightCache);
    DECLARE_FUNCTION(execLoadTextureFromBMP);
    DECLARE_FUNCTION(execGetTexture);
    DECLARE_FUNCTION(execSetTexture);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execGetSaveGameList);
    DECLARE_FUNCTION(execGetSaveGameSize);
    DECLARE_FUNCTION(execLoadGame);
    DECLARE_FUNCTION(execSaveGame);
    DECLARE_FUNCTION(execLoadGameFromMemoryCard);
    DECLARE_FUNCTION(execSaveGameToMemoryCard);
    DECLARE_FUNCTION(execConsoleCommand);
    void eventRenderTexture(class UScriptedTexture* Tex)
    {
        AActor_eventRenderTexture_Parms Parms;
        Parms.Tex=Tex;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderTexture),&Parms);
    }
    void eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    void eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    void eventPostNetBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPlayerReady(class APlayerPawn* Player)
    {
        AActor_eventPlayerReady_Parms Parms;
        Parms.Player=Player;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerReady),&Parms);
    }
    void eventStartLevel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_StartLevel),NULL);
    }
    void eventPostLoadGame()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostLoadGame),NULL);
    }
    void eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
    }
    void eventBroadcastLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    void eventBroadcastMessage(const FString& Msg, BITFIELD bBeep, FName Type)
    {
        AActor_eventBroadcastMessage_Parms Parms;
        Parms.Msg=Msg;
        Parms.bBeep=bBeep;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastMessage),&Parms);
    }
    void eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
    }
    void eventRenderOverlays(class UCanvas* Canvas)
    {
        AActor_eventRenderOverlays_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_RenderOverlays),&Parms);
    }
    void eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.InTeleporter=InTeleporter;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventScryeEnd(class APlayerPawn* P)
    {
        AActor_eventScryeEnd_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_ScryeEnd),&Parms);
    }
    void eventScryeBegin(class APlayerPawn* P)
    {
        AActor_eventScryeBegin_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_ScryeBegin),&Parms);
    }
    void eventDemoPlaySound(class USound* Sound, BYTE slot, FLOAT Volume, BITFIELD bNoOverride, FLOAT Radius, FLOAT Pitch, INT flags)
    {
        AActor_eventDemoPlaySound_Parms Parms;
        Parms.Sound=Sound;
        Parms.slot=slot;
        Parms.Volume=Volume;
        Parms.bNoOverride=bNoOverride;
        Parms.Radius=Radius;
        Parms.Pitch=Pitch;
        Parms.flags=flags;
        ProcessEvent(FindFunctionChecked(ENGINE_DemoPlaySound),&Parms);
    }
    void eventTakeDamage(class APawn* EventInstigator, FVector HitLocation, FVector Momentum, FDamageInfo DInfo)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DInfo=DInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
    }
    class AActor* eventHeldPropRequest(INT idx)
    {
        AActor_eventHeldPropRequest_Parms Parms;
        Parms.idx=idx;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_HeldPropRequest),&Parms);
        return Parms.ReturnValue;
    }
    void eventInterpolateEnd(class AActor* Other)
    {
        AActor_eventInterpolateEnd_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_InterpolateEnd),&Parms);
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.Other=Other;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.Other=Other;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        return Parms.ReturnValue;
    }
    void eventKillCredit(class AActor* Other)
    {
        AActor_eventKillCredit_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_KillCredit),&Parms);
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
    }
    void eventBaseChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
    }
    void eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
    }
    void eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
    }
    void eventFalling()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall, BYTE TextureID)
    {
        AActor_eventHitWall_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        Parms.TextureID=TextureID;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
    }
    void eventTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
    }
    void eventWarped(FVector OldLocation)
    {
        AActor_eventWarped_Parms Parms;
        Parms.OldLocation=OldLocation;
        ProcessEvent(FindFunctionChecked(ENGINE_Warped),&Parms);
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
    }
    void eventExpired()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Expired),NULL);
    }
    void eventDestroyed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
    }
    void eventSpawned()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Spawned),NULL);
    }
    void eventAnimEnd()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),NULL);
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AActor)
};


class ENGINE_API AInvisible : public AActor
{
public:
    DECLARE_CLASS(AInvisible,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInvisible)
};


class ENGINE_API AWind : public AInvisible
{
public:
    FLOAT WindSpeed;
    BYTE WindRadius;
    BYTE WindRadiusInner;
    BYTE WindFluctuation;
    BYTE WindFlucPeriod;
    BYTE WindSource;
    BITFIELD bPermeating:1 GCC_PACK(4);
    FVector Fluc GCC_ALIGN(16);
    FVector FlucVel;
    DECLARE_FUNCTION(execGetWind);
    DECLARE_CLASS(AWind,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWind)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AInvisible
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    DECLARE_CLASS(ABrush,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABrush)
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

class ENGINE_API AMover : public ABrush
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    BITFIELD bTossPlayer:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    BITFIELD bLoop:1 GCC_PACK(4);
    class USound* OpeningSound GCC_PACK(4);
    FSoundProps OpeningProps;
    class USound* OpenedSound;
    FSoundProps OpenedProps;
    class USound* ClosingSound;
    FSoundProps ClosingProps;
    class USound* ClosedSound;
    FSoundProps ClosedProps;
    class USound* MoveAmbientSound;
    FVector KeyPos[32];
    FRotator KeyRot[32];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    class ANavigationPoint* myMarker;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    class APawn* WaitingPawn;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bPlayerOnly:1;
    class ATrigger* RecommendedTrigger GCC_PACK(4);
    FVector SimOldPos;
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    DECLARE_CLASS(AMover,ABrush,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMover)
};


struct ASpawnNotify_eventSpawnNotification_Parms
{
    class AActor* A;
    class AActor* ReturnValue;
};
class ENGINE_API ASpawnNotify : public AInvisible
{
public:
    class UClass* ActorClass;
    class ASpawnNotify* Next;
    class AActor* eventSpawnNotification(class AActor* A)
    {
        ASpawnNotify_eventSpawnNotification_Parms Parms;
        Parms.A=A;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpawnNotification),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ASpawnNotify,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASpawnNotify)
};


class ENGINE_API AKeypoint : public AInvisible
{
public:
    DECLARE_CLASS(AKeypoint,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API Alocationid : public AKeypoint
{
public:
    FStringNoInit LocationName;
    FLOAT Radius;
    class Alocationid* NextLocation;
    DECLARE_CLASS(Alocationid,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(Alocationid)
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    INT Position;
    FLOAT RateModifier;
    FLOAT GameSpeedModifier;
    FLOAT FovModifier;
    BITFIELD bEndOfPath:1 GCC_PACK(4);
    BITFIELD bSkipNextPath:1;
    FLOAT ScreenFlashScale GCC_PACK(4);
    FVector ScreenFlashFog;
    class AInterpolationPoint* Prev;
    class AInterpolationPoint* Next;
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};


class ENGINE_API AInfo : public AInvisible
{
public:
    DECLARE_CLASS(AInfo,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};


class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bStopCountDown:1;
    INT RemainingTime GCC_PACK(4);
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT NumPlayers;
    INT SumFrags;
    FLOAT UpdateTimer;
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT Region;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    FStringNoInit GameEndedComments;
    class APlayerReplicationInfo* PRIArray[32];
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameReplicationInfo)
};


class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit PlayerName;
    FStringNoInit OldName;
    INT PlayerID;
    FStringNoInit TeamName;
    BYTE Team;
    INT TeamID;
    FLOAT Score;
    FLOAT Deaths;
    class UClass* VoiceType;
    class ADecoration* HasFlag;
    INT Ping;
    BYTE PacketLoss;
    BITFIELD bIsFemale:1 GCC_PACK(4);
    BITFIELD bIsABot:1;
    BITFIELD bFeigningDeath:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bAdmin:1;
    class UTexture* TalkTexture GCC_PACK(4);
    class AZoneInfo* PlayerZone;
    class Alocationid* PlayerLocation;
    INT StartTime;
    INT TimeAcc;
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerReplicationInfo)
};


struct AStatLog_eventLogGameSpecial2_Parms
{
    FString SpecialID;
    FString SpecialParam;
    FString SpecialParam2;
};
struct AStatLog_eventLogGameSpecial_Parms
{
    FString SpecialID;
    FString SpecialParam;
};
class ENGINE_API AStatLog : public AInfo
{
public:
    INT Context;
    BITFIELD bWorld:1 GCC_PACK(4);
    FLOAT TimeStamp GCC_PACK(4);
    FStringNoInit LocalStandard;
    FStringNoInit WorldStandard;
    FStringNoInit LogVersion;
    FStringNoInit LogInfoURL;
    FStringNoInit GameName;
    FStringNoInit GameCreator;
    FStringNoInit GameCreatorURL;
    FStringNoInit DecoderRingURL;
    FStringNoInit LocalBatcherURL;
    FStringNoInit LocalBatcherParams;
    FStringNoInit LocalStatsURL;
    FStringNoInit WorldBatcherURL;
    FStringNoInit WorldBatcherParams;
    FStringNoInit WorldStatsURL;
    FStringNoInit LocalLogDir;
    FStringNoInit WorldLogDir;
    BITFIELD bWorldBatcherError:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetGMTRef);
    DECLARE_FUNCTION(execGetPlayerChecksum);
    DECLARE_FUNCTION(execLogMutator);
    DECLARE_FUNCTION(execInitialCheck);
    DECLARE_FUNCTION(execBrowseRelativeLocalURL);
    DECLARE_FUNCTION(execExecuteWorldLogBatcher);
    DECLARE_FUNCTION(execBatchLocal);
    DECLARE_FUNCTION(execExecuteSilentLogBatcher);
    DECLARE_FUNCTION(execExecuteLocalLogBatcher);
    void eventLogGameSpecial2(const FString& SpecialID, const FString& SpecialParam, const FString& SpecialParam2)
    {
        AStatLog_eventLogGameSpecial2_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        Parms.SpecialParam2=SpecialParam2;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial2),&Parms);
    }
    void eventLogGameSpecial(const FString& SpecialID, const FString& SpecialParam)
    {
        AStatLog_eventLogGameSpecial_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial),&Parms);
    }
    DECLARE_CLASS(AStatLog,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLog)
};


class ENGINE_API AStatLogFile : public AStatLog
{
public:
    BITFIELD bWatermark:1 GCC_PACK(4);
    INT LogAr GCC_PACK(4);
    FStringNoInit StatLogFile;
    FStringNoInit StatLogFinal;
    DECLARE_FUNCTION(execFileLog);
    DECLARE_FUNCTION(execFileFlush);
    DECLARE_FUNCTION(execGetChecksum);
    DECLARE_FUNCTION(execWatermark);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AStatLogFile,AStatLog,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLogFile)
};

enum EStatDataType
{
    SDT_Percent             =0,
    SDT_Absolute            =1,
    SDT_MAX                 =2,
};
enum EStatDisplayMode
{
    ESM_Off                 =0,
    ESM_FrameRate           =1,
    ESM_NoFrameRate         =2,
    ESM_Always              =3,
    ESM_MAX                 =4,
};

class ENGINE_API AStatManager : public AInfo
{
public:
    FStatInfo Entries[16];
    BYTE DisplayMode;
    BITFIELD bUseFrameRate:1 GCC_PACK(4);
    BYTE MinFrameRate GCC_PACK(4);
    FLOAT MaxFrameTime;
    DECLARE_CLASS(AStatManager,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatManager)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    FLOAT TimeStamp;
    FLOAT Delta;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BITFIELD bFire:1;
    BITFIELD bForceFire:1;
    BITFIELD bFireAttSpell:1;
    BITFIELD bForceFireAttSpell:1;
    BITFIELD bFireDefSpell:1;
    BITFIELD bForceFireDefSpell:1;
    FVector Acceleration GCC_ALIGN(16);
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};

enum EWeather
{
    Weather_Clear           =0,
    Weather_Rain            =1,
    Weather_Snow            =2,
    Weather_MAX             =3,
};

struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    FLOAT WeatherStrength;
    BYTE Weather;
    FName SkyZoneTag;
    FName ZoneTag;
    FVector ZoneGravity;
    FVector ZoneVelocity;
    FLOAT ZoneGroundFriction;
    FLOAT ZoneFluidFriction;
    FLOAT ZoneTerminalVelocity;
    FName ZonePlayerEvent;
    INT ZonePlayerCount;
    INT NumCarcasses;
    INT DamagePerSec;
    FName DamageType;
    FStringNoInit DamageString;
    FStringNoInit ZoneName;
    class Alocationid* locationid;
    INT MaxCarcasses;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    class ASkyZoneInfo* SkyZone;
    BITFIELD bSkyZone:1 GCC_PACK(4);
    BITFIELD bWaterZone:1;
    BITFIELD bFogZone:1;
    BITFIELD bKillZone:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bGravityZone:1;
    BITFIELD bPainZone:1;
    BITFIELD bDestructive:1;
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bMagicalDamage:1;
    BYTE AmbientBrightness GCC_PACK(4);
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FColor FogColor;
    FLOAT FogDistance;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bReverbZone:1 GCC_PACK(4);
    BITFIELD bRaytraceReverb:1;
    FLOAT SpeedOfSound GCC_PACK(4);
    BYTE MasterGain;
    INT CutoffHz;
    BYTE Delay[6];
    BYTE Gain[6];
    class UTexture* LensFlare[12];
    FLOAT LensFlareOffset[12];
    FLOAT LensFlareScale[12];
    BYTE MinLightCount;
    BYTE MaxLightCount;
    INT MinLightingPolyCount;
    INT MaxLightingPolyCount;
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AZoneInfo)
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    INT iNextDest;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    BITFIELD bRotating:1 GCC_PACK(4);
    FLOAT DegreesPerSec GCC_PACK(4);
    INT DeltaRot;
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_DoneSave         =3,
    LEVACT_Connecting       =4,
    LEVACT_Precaching       =5,
    LEVACT_MAX              =6,
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation;
    BITFIELD bRealTickTime:1 GCC_PACK(4);
    FLOAT TimeSeconds GCC_PACK(4);
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    INT LevelIndex;
    FStringNoInit Pauser;
    class ULevelSummary* Summary;
    class ADecalManager* DMan;
    BITFIELD bLonePlayer:1 GCC_PACK(4);
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bLowRes:1;
    BITFIELD bAllowFlight:1;
    BITFIELD bDebugMessaging:1;
    BITFIELD bDontAllowSavegame:1;
    BITFIELD bSepiaOverlay:1;
    BITFIELD bIsCutsceneLevel:1;
    BITFIELD bSoftWeatherTransitions:1;
    class UMusic* Song GCC_PACK(4);
    BYTE SongSection;
    BYTE CdTrack;
    FLOAT PlayerDoppler;
    BITFIELD bPSX2Level:1 GCC_PACK(4);
    FLOAT UnitsPerMeter GCC_PACK(4);
    FLOAT Brightness;
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    INT HubStackLevel;
    BYTE LevelAction;
    BITFIELD bNeverPrecache:1 GCC_PACK(4);
    BYTE NetMode GCC_PACK(4);
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    class UClass* DefaultGameType;
    class AGameInfo* Game;
    class ANavigationPoint* NavigationPointList;
    class APawn* PawnList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    INT AIProfile[8];
    FLOAT AvgAITime;
    BITFIELD bCheckWalkSurfaces:1 GCC_PACK(4);
    class ASpawnNotify* SpawnNotify GCC_PACK(4);
    TArray<class UClass*> PreloadClasses;
    BITFIELD bLoadBootShellPSX2:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    DECLARE_FUNCTION(execGetTotalWind);
    DECLARE_FUNCTION(execGetZone);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALevelInfo)
};


struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerPawn* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class UClass* SpawnClass;
    class APlayerPawn* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    INT ItemGoals;
    INT KillGoals;
    INT SecretGoals;
    BYTE Difficulty;
    BITFIELD bNoMonsters:1 GCC_PACK(4);
    BITFIELD bMuteSpectators:1;
    BITFIELD bHumansOnly:1;
    BITFIELD bRestartLevel:1;
    BITFIELD bPauseable:1;
    BITFIELD bCoopWeaponMode:1;
    BITFIELD bClassicDeathMessages:1;
    BITFIELD bLowGore:1;
    BITFIELD bCanChangeSkin:1;
    BITFIELD bTeamGame:1;
    BITFIELD bVeryLowGore:1;
    BITFIELD bNoCheating:1;
    BITFIELD bAllowFOV:1;
    BITFIELD bDeathMatch:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    FLOAT AutoAim GCC_PACK(4);
    FLOAT GameSpeed;
    FLOAT StartTime;
    class UClass* DefaultPlayerClass;
    class UClass* DefaultWeapon;
    INT MaxSpectators;
    INT NumSpectators;
    FStringNoInit AdminPassword;
    FStringNoInit GamePassword;
    class UClass* ScoreBoardType;
    class UClass* GameMenuType;
    FStringNoInit BotMenuType;
    FStringNoInit RulesMenuType;
    FStringNoInit SettingsMenuType;
    FStringNoInit GameUMenuType;
    FStringNoInit MultiplayerUMenuType;
    FStringNoInit GameOptionsMenuType;
    class UClass* HUDType;
    class UClass* MapListType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    FStringNoInit SpecialDamageString;
    FStringNoInit SwitchLevelMessage;
    INT SentText;
    FStringNoInit DefaultPlayerName;
    FStringNoInit LeftMessage;
    FStringNoInit FailedSpawnMessage;
    FStringNoInit FailedPlaceMessage;
    FStringNoInit FailedTeamMessage;
    FStringNoInit NameChangedMessage;
    FStringNoInit EnteredMessage;
    FStringNoInit GameName;
    FStringNoInit MaxedOutMessage;
    FStringNoInit WrongPassword;
    FStringNoInit NeedPassword;
    FStringNoInit IPBanned;
    INT MaxPlayers;
    INT NumPlayers;
    INT CurrentID;
    FStringNoInit IPPolicies[50];
    class UClass* DeathMessageClass;
    class UClass* DMMessageClass;
    class UClass* MutatorClass;
    class AMutator* BaseMutator;
    class AMutator* DamageMutator;
    class AMutator* MessageMutator;
    class UClass* WaterZoneType;
    FName DefaultPlayerState;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ServerLogName;
    class AStatLog* LocalLog;
    class AStatLog* WorldLog;
    BITFIELD bLocalLog:1 GCC_PACK(4);
    BITFIELD bWorldLog:1;
    BITFIELD bBatchLocal:1;
    BITFIELD bLoggingGame:1;
    FStringNoInit LocalLogFileName GCC_PACK(4);
    FStringNoInit WorldLogFileName;
    class UClass* StatLogClass;
    INT DemoBuild;
    INT DemoHasTuts;
    class ARenewalConfig* RenewalConfig;
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventPostLogin(class APlayerPawn* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    class APlayerPawn* eventLogin(const FString& Portal, const FString& Options, FString& Error, class UClass* SpawnClass)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        Parms.SpawnClass=SpawnClass;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


struct AMutator_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class AMutator* NextDamageMutator;
    class AMutator* NextMessageMutator;
    class AMutator* NextHUDMutator;
    BITFIELD bHUDMutator:1 GCC_PACK(4);
    class UClass* DefaultWeapon GCC_PACK(4);
    void eventPostRender(class UCanvas* Canvas)
    {
        AMutator_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AInvisible
{
public:
    FName ownerTeam;
    BITFIELD taken:1 GCC_PACK(4);
    INT upstreamPaths[16] GCC_PACK(4);
    INT Paths[16];
    INT PrunedPaths[16];
    class ANavigationPoint* VisNoReachPaths[16];
    INT visitedWeight;
    class AActor* routeCache;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* startPath;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    BITFIELD bPlayerOnly:1 GCC_PACK(4);
    BITFIELD bEndPoint:1;
    BITFIELD bEndPointOnly:1;
    BITFIELD bSpecialCost:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bTwoWay:1;
    BITFIELD bNoFlight:1;
    BITFIELD bNoMinCollision:1;
    DECLARE_FUNCTION(execdescribeSpec);
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.Seeker=Seeker;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT LastTriggerTime;
    FLOAT MaxZDiffAdd;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};


class ENGINE_API AWarpZoneMarker : public ANavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};


class ENGINE_API AButtonMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(AButtonMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AButtonMarker)
};


class ENGINE_API ATriggerMarker : public ANavigationPoint
{
public:
    DECLARE_CLASS(ATriggerMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggerMarker)
};


class ENGINE_API AInventorySpot : public ANavigationPoint
{
public:
    class AInventory* markedItem;
    DECLARE_CLASS(AInventorySpot,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventorySpot)
};


class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    BITFIELD bCutScene:1;
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    FStringNoInit URL_PSX2;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    BITFIELD bForcePlayerTouch:1;
    BITFIELD bUseTransitionScreen:1;
    FStringNoInit TransitionScreenName[6] GCC_PACK(4);
    class USound* EntrySound;
    class USound* ExitSound;
    FVector TargetVelocity;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};


class ENGINE_API AMenu : public AInvisible
{
public:
    class AMenu* ParentMenu;
    INT Selection;
    INT MenuLength;
    BITFIELD bConfigChanged:1 GCC_PACK(4);
    BITFIELD bExitAllMenus:1;
    class APlayerPawn* PlayerOwner GCC_PACK(4);
    FStringNoInit HelpMessage[24];
    FStringNoInit MenuList[24];
    FStringNoInit LeftString;
    FStringNoInit RightString;
    FStringNoInit CenterString;
    FStringNoInit EnabledString;
    FStringNoInit DisabledString;
    FStringNoInit MenuTitle;
    FStringNoInit YesString;
    FStringNoInit NoString;
    DECLARE_CLASS(AMenu,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMenu)
};


struct AHUD_eventAddSubtitle_Parms
{
    FString NewSubtitle;
    FString SoundName;
};
struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
class ENGINE_API AHUD : public AInvisible
{
public:
    INT HudMode;
    INT Crosshair;
    class UClass* MainMenuType;
    FStringNoInit HUDConfigWindowType;
    FColor WhiteColor;
    class AMenu* MainMenu;
    class AMutator* HUDMutator;
    class APlayerPawn* PlayerOwner;
    BITFIELD bLetterbox:1 GCC_PACK(4);
    BITFIELD bEnableLetterBox:1;
    FLOAT LetterboxAspectRatio GCC_PACK(4);
    FLOAT LetterboxFadeRate;
    FLOAT LetterboxFadeTime;
    INT LetterboxHeight;
    INT LastDamageInflicted;
    FStringNoInit ReplayMessage;
    FSubtitleInfo Subtitle;
    FLOAT ratio;
    void eventAddSubtitle(const FString& NewSubtitle, const FString& SoundName)
    {
        AHUD_eventAddSubtitle_Parms Parms;
        Parms.NewSubtitle=NewSubtitle;
        Parms.SoundName=SoundName;
        ProcessEvent(FindFunctionChecked(ENGINE_AddSubtitle),&Parms);
    }
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        AHUD_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    DECLARE_CLASS(AHUD,AInvisible,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API ATriggers : public AInvisible
{
public:
    DECLARE_CLASS(ATriggers,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_MAX                  =5,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bPassThru:1;
    BITFIELD bInitiallyActive:1;
    BITFIELD bFirstTick:1;
    class UClass* ClassProximityType GCC_PACK(4);
    FLOAT RepeatTriggerTime;
    FLOAT RepeatRandomTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    FName ConditionalGameEvent;
    BITFIELD Condition:1 GCC_PACK(4);
    class AActor* TriggerActor GCC_PACK(4);
    class AActor* TriggerActor2;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


class ENGINE_API ALight : public AInvisible
{
public:
    DECLARE_CLASS(ALight,AInvisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};


class ENGINE_API AVisible : public AActor
{
public:
    FRotator Facing;
    FVector Acceleration;
    FLOAT Buoyancy;
    class USound* ImpactSound[3];
    FLOAT ImpactVolume;
    FLOAT ImpactVolumeVar;
    FLOAT ImpactPitch;
    FLOAT ImpactPitchVar;
    class UClass* ImpactSoundClass;
    BYTE AnimStream[64];
    DECLARE_CLASS(AVisible,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVisible)
};

enum EIntelligence
{
    BRAINS_None             =0,
    BRAINS_Reptile          =1,
    BRAINS_Mammal           =2,
    BRAINS_Human            =3,
    BRAINS_MAX              =4,
};
enum EAttitude
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Hate           =1,
    ATTITUDE_Frenzy         =2,
    ATTITUDE_Threaten       =3,
    ATTITUDE_Ignore         =4,
    ATTITUDE_Friendly       =5,
    ATTITUDE_Follow         =6,
    ATTITUDE_MAX            =7,
};

struct APawn_eventPainTimer_Parms
{
};
struct APawn_eventSpeechTimer_Parms
{
};
struct APawn_eventHeadZoneChange_Parms
{
    class AZoneInfo* newHeadZone;
};
struct APawn_eventFootZoneChange_Parms
{
    class AZoneInfo* newFootZone;
};
struct APawn_eventWalkTexture_Parms
{
    class UTexture* Texture;
    FVector StepLocation;
    FVector StepNormal;
};
struct APawn_eventEnemyNotVisible_Parms
{
};
struct APawn_eventUpdateTactics_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventSeeHatedPawn_Parms
{
    class APawn* aPawn;
};
struct APawn_eventSeePlayer_Parms
{
    class AActor* Seen;
};
struct APawn_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct APawn_eventClientHearSound_Parms
{
    class AActor* Actor;
    INT Id;
    class USound* S;
    FVector SoundLocation;
    FVector Parameters;
};
struct APawn_eventLongFall_Parms
{
};
struct APawn_eventPlayerTimeout_Parms
{
};
struct APawn_eventChangedWeapon_Parms
{
};
struct APawn_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APawn_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
    BITFIELD bBeep;
};
struct APawn_eventProjectileStrikeNotify_Parms
{
    class APawn* P;
};
struct APawn_eventSpellCastNotify_Parms
{
    FName SpellName;
    class APawn* Caster;
};
struct APawn_eventWeaponFireNotify_Parms
{
    FName WeaponName;
    class APawn* Attacker;
};
struct APawn_eventAlterDestination_Parms
{
};
struct APawn_eventMayFall_Parms
{
};
struct APawn_eventPreSkelAnim_Parms
{
};
class ENGINE_API APawn : public AVisible
{
public:
    BITFIELD bBehindView:1 GCC_PACK(4);
    BITFIELD bIsPlayer:1;
    BITFIELD bJustLanded:1;
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bIsCreeping:1;
    BITFIELD bHitSlopedWall:1;
    BITFIELD bNeverSwitchOnPickup:1;
    BITFIELD bWarping:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bNoDetect:1;
    BITFIELD bBloodyFootprints:1;
    BITFIELD bForceClimb:1;
    BITFIELD bIsClimbing:1;
    class UClass* BackRightDecalClass GCC_PACK(4);
    class UClass* BackLeftDecalClass;
    class UClass* FrontRightDecalClass;
    class UClass* FrontLeftDecalClass;
    class UClass* BackRightSnowDecalClass;
    class UClass* BackLeftSnowDecalClass;
    class UClass* FrontRightSnowDecalClass;
    class UClass* FrontLeftSnowDecalClass;
    BITFIELD bCanStrafe:1 GCC_PACK(4);
    BITFIELD bFixedStart:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bDrowning:1;
    BITFIELD bLOSflag:1;
    BITFIELD bFromWall:1;
    BITFIELD bHunting:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bJumpOffPawn:1;
    BITFIELD bShootSpecial:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bIsHuman:1;
    BITFIELD bIsFemale:1;
    BITFIELD bIsMultiSkinned:1;
    BITFIELD bCountJumps:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bViewTarget:1;
    BITFIELD bIsLit:1;
    INT LitAmplitude GCC_PACK(4);
    FLOAT VolumeMultiplier;
    FLOAT SightCounter;
    FLOAT PainTime;
    FLOAT SpeechTime;
    FLOAT AvgPhysicsTime;
    FPointRegion FootRegion;
    FPointRegion HeadRegion;
    class AFireModifier* FireMod;
    class AWetModifier* WetMod;
    class AGlowModifier* GlowMod;
    class ABloodFootprintModifier* BloodMod;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    class AActor* FaceTarget;
    FVector Destination;
    FVector Focus;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    BITFIELD bReverseMove:1 GCC_PACK(4);
    FLOAT MeleeRange GCC_PACK(4);
    INT YawThreshold;
    FLOAT GroundSpeed;
    FLOAT GroundFriction;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT MaxStepHeight;
    FLOAT AirControl;
    FName LookJoint;
    FLOAT MinHitWall;
    BYTE Visibility;
    FLOAT Alertness;
    FLOAT Stimulus;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT HearingThreshold;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    class APawn* Enemy;
    class UClass* HatedClass;
    FName HatedTag;
    FName HatedID;
    BITFIELD bIsHated:1 GCC_PACK(4);
    class AWeapon* Weapon GCC_PACK(4);
    class AWeapon* PendingWeapon;
    class AInventory* SelectedItem;
    BITFIELD bAcceptDamage:1 GCC_PACK(4);
    BITFIELD bAcceptMagicDamage:1;
    BITFIELD bWetFeet:1;
    class ASpell* AttSpell GCC_PACK(4);
    class ASpell* DefSpell;
    class ASpell* PendingAttSpell;
    class ASpell* PendingDefSpell;
    INT Mana;
    INT ManaCapacity;
    INT ManaRefreshAmt;
    FLOAT ManaRefreshTime;
    BITFIELD bRunMode:1 GCC_PACK(4);
    FRotator ViewRotation GCC_PACK(4);
    FVector WalkBob;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT Climb;
    FLOAT ClimbRate;
    FLOAT ClimbDirection;
    FVector VelocityBias;
    FLOAT OrthoZoom;
    FLOAT FovAngle;
    FRotator BehindViewOffset;
    INT DieCount;
    INT ItemCount;
    INT KillCount;
    INT SecretCount;
    INT Spree;
    FLOAT Health;
    class UClass* OnFireParticles;
    class UClass* OnFireSmokeParticles;
    class UClass* GlowFX;
    class UClass* WaterParticles;
    FStringNoInit SelectionMesh;
    FStringNoInit SpecialMesh;
    FName ReducedDamageType;
    FLOAT ReducedDamagePct;
    class UClass* DropWhenKilled;
    FLOAT UnderWaterTime;
    BYTE AttitudeToPlayer;
    BYTE Intelligence;
    FLOAT Skill;
    class AActor* SpecialGoal;
    FLOAT SpecialPause;
    FVector noise1spot;
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    class UClass* SoundSet;
    FImpactSoundParams PI_StabSound;
    FImpactSoundParams PI_BiteSound;
    FImpactSoundParams PI_BluntSound;
    FImpactSoundParams PI_BulletSound;
    FImpactSoundParams PI_RipSliceSound;
    FImpactSoundParams PI_GenLargeSound;
    FImpactSoundParams PI_GenMediumSound;
    FImpactSoundParams PI_GenSmallSound;
    class UClass* PE_StabEffect;
    class UClass* PE_StabKilledEffect;
    class UClass* PE_BiteEffect;
    class UClass* PE_BiteKilledEffect;
    class UClass* PE_BluntEffect;
    class UClass* PE_BluntKilledEffect;
    class UClass* PE_BulletEffect;
    class UClass* PE_BulletKilledEffect;
    class UClass* PE_RipSliceEffect;
    class UClass* PE_RipSliceKilledEffect;
    class UClass* PE_GenLargeEffect;
    class UClass* PE_GenLargeKilledEffect;
    class UClass* PE_GenMediumEffect;
    class UClass* PE_GenMediumKilledEffect;
    class UClass* PE_GenSmallEffect;
    class UClass* PE_GenSmallKilledEffect;
    class UClass* PD_StabDecal;
    class UClass* PD_BiteDecal;
    class UClass* PD_BluntDecal;
    class UClass* PD_BulletDecal;
    class UClass* PD_RipSliceDecal;
    class UClass* PD_GenLargeDecal;
    class UClass* PD_GenMediumDecal;
    class UClass* PD_GenSmallDecal;
    class UClass* StabWound;
    class UClass* BiteWound;
    class UClass* BluntWound;
    class UClass* BulletWound;
    class UClass* RipSliceWound;
    class UClass* GenLargeWound;
    class UClass* GenMediumWound;
    class UClass* GenSmallWound;
    class APawn* nextPawn;
    BYTE LastFootStep;
    class USound* HitSound1;
    class USound* HitSound2;
    class USound* Land;
    class USound* Die;
    class USound* WaterStep;
    class UClass* FootSoundClass;
    FLOAT FootSoundRadius;
    BYTE bZoom;
    BYTE bRun;
    BYTE bLook;
    BYTE bDuck;
    BYTE bSnapLevel;
    BYTE bStrafe;
    BYTE bFire;
    BYTE bFreeLook;
    BYTE bFireAttSpell;
    BYTE bFireDefSpell;
    BYTE bExtra0;
    BYTE bJump;
    BYTE bExtra2;
    BYTE bExtra3;
    class ANavigationPoint* home;
    class ANavigationPoint* routeCache[16];
    FName NextState;
    FName NextLabel;
    FLOAT DamageScaling;
    FLOAT GibDamageThresh;
    class UClass* PersistentBlood;
    class AParticleFX* PBlood;
    INT HeartRate;
    INT BloodPressure;
    class ADecoration* carriedDecoration;
    FName PlayerReStartState;
    FStringNoInit MenuName;
    FStringNoInit NameArticle;
    BYTE VoicePitch;
    FStringNoInit VoiceType;
    FLOAT OldMessageTime;
    class UClass* PlayerReplicationInfoClass;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ADecal* Shadow;
    DECLARE_FUNCTION(execClientHearSound);
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execPlaySound_P);
    DECLARE_FUNCTION(execPlayFootSound);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execRemovePawn);
    DECLARE_FUNCTION(execAddPawn);
    DECLARE_FUNCTION(execFindBestInventoryPath);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execClearPaths);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execPopRouteCache);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execRotateToView);
    DECLARE_FUNCTION(execTurnToward);
    DECLARE_FUNCTION(execTurnTo);
    DECLARE_FUNCTION(execStrafeFacing);
    DECLARE_FUNCTION(execStrafeTo);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    void eventPainTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PainTimer),NULL);
    }
    void eventSpeechTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SpeechTimer),NULL);
    }
    void eventHeadZoneChange(class AZoneInfo* newHeadZone)
    {
        APawn_eventHeadZoneChange_Parms Parms;
        Parms.newHeadZone=newHeadZone;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadZoneChange),&Parms);
    }
    void eventFootZoneChange(class AZoneInfo* newFootZone)
    {
        APawn_eventFootZoneChange_Parms Parms;
        Parms.newFootZone=newFootZone;
        ProcessEvent(FindFunctionChecked(ENGINE_FootZoneChange),&Parms);
    }
    void eventWalkTexture(class UTexture* Texture, FVector StepLocation, FVector StepNormal)
    {
        APawn_eventWalkTexture_Parms Parms;
        Parms.Texture=Texture;
        Parms.StepLocation=StepLocation;
        Parms.StepNormal=StepNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_WalkTexture),&Parms);
    }
    void eventEnemyNotVisible()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
    }
    void eventUpdateTactics(FLOAT DeltaTime)
    {
        APawn_eventUpdateTactics_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateTactics),&Parms);
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
    }
    void eventSeeHatedPawn(class APawn* aPawn)
    {
        APawn_eventSeeHatedPawn_Parms Parms;
        Parms.aPawn=aPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_SeeHatedPawn),&Parms);
    }
    void eventSeePlayer(class AActor* Seen)
    {
        APawn_eventSeePlayer_Parms Parms;
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
    }
    void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
    {
        APawn_eventHearNoise_Parms Parms;
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
    }
    void eventClientHearSound(class AActor* Actor, INT Id, class USound* S, FVector SoundLocation, FVector Parameters)
    {
        APawn_eventClientHearSound_Parms Parms;
        Parms.Actor=Actor;
        Parms.Id=Id;
        Parms.S=S;
        Parms.SoundLocation=SoundLocation;
        Parms.Parameters=Parameters;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientHearSound),&Parms);
    }
    void eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    void eventPlayerTimeout()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTimeout),NULL);
    }
    void eventChangedWeapon()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ChangedWeapon),NULL);
    }
    void eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        APawn_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    void eventClientMessage(const FString& S, FName Type, BITFIELD bBeep)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        Parms.bBeep=bBeep;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventProjectileStrikeNotify(class APawn* P)
    {
        APawn_eventProjectileStrikeNotify_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_ProjectileStrikeNotify),&Parms);
    }
    void eventSpellCastNotify(FName SpellName, class APawn* Caster)
    {
        APawn_eventSpellCastNotify_Parms Parms;
        Parms.SpellName=SpellName;
        Parms.Caster=Caster;
        ProcessEvent(FindFunctionChecked(ENGINE_SpellCastNotify),&Parms);
    }
    void eventWeaponFireNotify(FName WeaponName, class APawn* Attacker)
    {
        APawn_eventWeaponFireNotify_Parms Parms;
        Parms.WeaponName=WeaponName;
        Parms.Attacker=Attacker;
        ProcessEvent(FindFunctionChecked(ENGINE_WeaponFireNotify),&Parms);
    }
    void eventAlterDestination()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AlterDestination),NULL);
    }
    void eventMayFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
    }
    void eventPreSkelAnim()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreSkelAnim),NULL);
    }
    DECLARE_CLASS(APawn,AVisible,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APawn)
};

enum EActError
{
    ACT_NoError             =0,
    ACT_ContError           =1,
    ACT_ContBusy            =2,
    ACT_AllocError          =3,
    ACT_InvalidCombo        =4,
    ACT_InvalidActuator     =5,
    ACT_InvalidOption       =6,
    ACT_AlignReset          =7,
    ACT_TransmitError       =8,
    ACT_MAX                 =9,
};

struct APlayerPawn_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerPawn_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventUnPossess_Parms
{
};
struct APlayerPawn_eventPossess_Parms
{
};
struct APlayerPawn_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
struct APlayerPawn_eventShowUpgradeMenu_Parms
{
};
struct APlayerPawn_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
struct APlayerPawn_eventPreClientTravel_Parms
{
};
struct APlayerPawn_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
class ENGINE_API APlayerPawn : public APawn
{
public:
    class UPlayer* Player;
    FStringNoInit Password;
    FColor InvokeColor;
    FColor CrossHairColor;
    FColor LitCrossHairColor;
    FLOAT CrossHairAlpha;
    FColor CrossHairInvokeColor;
    class APlayerModifier* SpeedMod;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    BITFIELD bCanRestart:1 GCC_PACK(4);
    BITFIELD bRenderSelf:1;
    BITFIELD bAmplifySpell:1;
    FLOAT CrouchCollisionHeight GCC_PACK(4);
    FLOAT CrouchEyeHeight;
    FLOAT CrouchRate;
    FLOAT CrouchSpeedScale;
    FLOAT CrouchTime;
    FLOAT WalkingSpeedScale;
    BITFIELD bAllowMove:1 GCC_PACK(4);
    class AStatManager* IconsofShame GCC_PACK(4);
    INT ShowFlags;
    INT RendMap;
    INT Misc1;
    INT Misc2;
    class AActor* ViewTarget;
    FVector FlashScale;
    FVector FlashFog;
    class AHUD* myHUD;
    class AScoreBoard* Scoring;
    class UClass* HUDType;
    class UClass* ScoringType;
    FLOAT DesiredFlashScale;
    FLOAT ConstantGlowScale;
    FLOAT InstantFlash;
    FVector DesiredFlashFog;
    FVector ConstantGlowFog;
    FVector InstantFog;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    FLOAT ZoomFOV;
    FVector EyeTraceLoc;
    FVector EyeTraceNormal;
    INT EyeTraceJoint;
    class AActor* EyeTraceActor;
    class UMusic* Song;
    BYTE SongSection;
    BYTE CdTrack;
    BYTE Transition;
    FLOAT shaketimer;
    INT shakemag;
    FLOAT shakevert;
    FLOAT maxshake;
    FLOAT verttimer;
    FLOAT ScryeTimer;
    FLOAT ScryeFullTime;
    FLOAT ScryeRampTime;
    class UClass* CarcassType;
    FLOAT MyAutoAim;
    FLOAT Handedness;
    class USound* JumpSound[2];
    BITFIELD bAdmin:1 GCC_PACK(4);
    BITFIELD bLookUpStairs:1;
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bIsCrouching:1;
    BITFIELD bShakeDir:1;
    BITFIELD bAnimTransition:1;
    BITFIELD bIsTurning:1;
    BITFIELD bFrozen:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bInvertMouse:1;
    BITFIELD bShowScores:1;
    BITFIELD bShowMenu:1;
    BITFIELD bSpecialMenu:1;
    BITFIELD bWokeUp:1;
    BITFIELD bPressedJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bDelayedCommand:1;
    BITFIELD bRising:1;
    BITFIELD bReducedVis:1;
    BITFIELD bCenterView:1;
    BITFIELD bMouseDecel:1;
    BITFIELD bMouseSmoothing:1;
    BITFIELD bMaxMouseSmoothing:1;
    BITFIELD bMouseZeroed:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bNoFlash:1;
    BITFIELD bNoVoices:1;
    BITFIELD bMessageBeep:1;
    BITFIELD bZooming:1;
    BITFIELD bSinglePlayer:1;
    BITFIELD bJustFired:1;
    BITFIELD bJustFiredAttSpell:1;
    BITFIELD bJustFiredDefSpell:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bNeverAutoSwitch:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bCheatsEnabled:1;
    BITFIELD bHaveTarget:1;
    BITFIELD bUsingAutoAim:1;
    BITFIELD bCanExitSpecialState:1;
    BITFIELD bUpdateInventorySelect:1;
    FLOAT ZoomLevel GCC_PACK(4);
    class UClass* SpecialMenu;
    FStringNoInit DelayedCommand;
    FLOAT MouseSensitivity;
    FLOAT GoreLevel;
    BITFIELD bReloading:1 GCC_PACK(4);
    FName WeaponPriority[50] GCC_PACK(4);
    class UTexture* MultiSkins[8];
    FLOAT SmoothMouseX;
    FLOAT SmoothMouseY;
    FLOAT BorrowedMouseX;
    FLOAT BorrowedMouseY;
    FLOAT MouseSmoothThreshold;
    FLOAT MouseZeroTime;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    FLOAT aExtra4;
    FLOAT aExtra3;
    FLOAT aExtra2;
    FLOAT aExtra1;
    FLOAT aExtra0;
    BYTE bCtrl;
    BYTE bSelectWeapon;
    BYTE bSelectAttSpell;
    BYTE bSelectDefSpell;
    BYTE bScrollWeapon;
    BYTE bScrollAttSpell;
    BYTE bScrollDefSpell;
    BYTE bAxisLeft;
    BYTE bAxisRight;
    BYTE bAxisUp;
    BYTE bAxisDown;
    BITFIELD bDigitalStickPSX2:1 GCC_PACK(4);
    FLOAT cJoyX GCC_PACK(4);
    FLOAT cJoyY;
    FLOAT cJoyZ;
    FLOAT cJoyR;
    INT Port;
    INT slot;
    FLOAT Time;
    INT NoActuators;
    INT MaxActuators;
    FActData ActuatorData[5];
    INT NoComboLists;
    INT MaxCombo;
    INT ComboData[100];
    INT ActiveList;
    BYTE ActiveActuators;
    BITFIELD bModeFlag:1 GCC_PACK(4);
    BITFIELD bVibrateOn:1;
    class ASavedMove* SavedMoves GCC_PACK(4);
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    FStringNoInit ProgressMessage[8];
    FColor ProgressColor[8];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    FStringNoInit FailedView;
    class APawn* Killer;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ngWorldSecret;
    BITFIELD ngSecretSet:1 GCC_PACK(4);
    BITFIELD ReceivedSecretChecksum:1;
    FRotator TargetViewRotation GCC_PACK(4);
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    INT DemoViewPitch;
    INT DemoViewYaw;
    FLOAT LastPlaySound;
    BITFIELD bEnableSubtitles:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGUIExit);
    DECLARE_FUNCTION(execGUIEnter);
    DECLARE_FUNCTION(execRunActuator);
    DECLARE_FUNCTION(execActivateActuator);
    DECLARE_FUNCTION(execGetNoActuators);
    DECLARE_FUNCTION(execResetAct);
    DECLARE_FUNCTION(execInitAct);
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execClientTravel);
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerPawn_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventPlayerTick(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
    }
    void eventUnPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnPossess),NULL);
    }
    void eventPossess()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Possess),NULL);
    }
    void eventPlayerInput(FLOAT DeltaTime)
    {
        APlayerPawn_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    void eventShowUpgradeMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
    }
    void eventPostRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        APlayerPawn_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerPawn_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerPawn,APawn,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerPawn)
};


class ENGINE_API ACamera : public APlayerPawn
{
public:
    DECLARE_CLASS(ACamera,APlayerPawn,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ACamera)
};


class ENGINE_API AScout : public APawn
{
public:
    DECLARE_CLASS(AScout,APawn,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};

enum EDistributionType
{
    DIST_Random             =0,
    DIST_Uniform            =1,
    DIST_MAX                =2,
};
enum EParticlePrimitive
{
    PPRIM_Line              =0,
    PPRIM_Billboard         =1,
    PPRIM_Liquid            =2,
    PPRIM_Shard             =3,
    PPRIM_TriTube           =4,
    PPRIM_MAX               =5,
};

class ENGINE_API AParticleFX : public AVisible
{
public:
    FFloatParams ParticlesPerSec;
    FFloatParams SourceWidth;
    FFloatParams SourceHeight;
    FFloatParams SourceDepth;
    FFloatParams Period;
    FFloatParams Decay;
    FFloatParams AngularSpreadWidth;
    FFloatParams AngularSpreadHeight;
    BITFIELD bSteadyState:1 GCC_PACK(4);
    BITFIELD bPrime:1;
    FFloatParams Speed GCC_PACK(4);
    FFloatParams Lifetime;
    FColorParams ColorStart;
    FColorParams ColorEnd;
    FFloatParams AlphaStart;
    FFloatParams AlphaEnd;
    FFloatParams SizeWidth;
    FFloatParams SizeLength;
    FFloatParams SizeEndScale;
    FFloatParams SpinRate;
    FFloatParams DripTime;
    BITFIELD bUpdate:1 GCC_PACK(4);
    BITFIELD bVelocityRelative:1;
    BITFIELD bSystemRelative:1;
    FLOAT Strength GCC_PACK(4);
    FLOAT LOD;
    FLOAT AlphaDelay;
    FLOAT ColorDelay;
    FLOAT SizeDelay;
    FLOAT Chaos;
    FLOAT ChaosDelay;
    FLOAT Elasticity;
    FVector Attraction;
    FLOAT Damping;
    BYTE Distribution;
    FLOAT WindModifier;
    BITFIELD bWindPerParticle:1 GCC_PACK(4);
    FLOAT GravityModifier GCC_PACK(4);
    FVector Gravity;
    INT ParticlesAlive;
    INT ParticlesMax;
    class UTexture* Textures[5];
    class UTexture* ColorPalette;
    BYTE RenderPrimitive;
    class UParticleList* ParticleList;
    FLOAT EmitDelay;
    FVector LastUpdateLocation;
    FVector LastEmitLocation;
    FRotator LastUpdateRotation;
    FLOAT EmissionResidue;
    FLOAT Age;
    FLOAT ElapsedTime;
    BITFIELD bShuttingDown:1 GCC_PACK(4);
    FPlane LightColor GCC_ALIGN(16);
    INT CurrentPriorityTag;
    BITFIELD bShellOnly:1 GCC_PACK(4);
    DECLARE_FUNCTION(execRecomputeDeltas);
    DECLARE_FUNCTION(execSetParticleParams);
    DECLARE_FUNCTION(execGetParticleParams);
    DECLARE_FUNCTION(execAddParticle);
    DECLARE_FUNCTION(execNumParticles);
    DECLARE_CLASS(AParticleFX,AVisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AParticleFX)
};

enum EItemType
{
    ITEM_None               =0,
    ITEM_Inventory          =1,
    WEAPON_Conventional     =2,
    SPELL_Offensive         =3,
    SPELL_Defensive         =4,
    SPELL_Active            =5,
    ITEM_MAX                =6,
};

struct AInventory_eventLoadGameAdd_Parms
{
    class APawn* Player;
};
struct AInventory_eventBotDesireability_Parms
{
    class APawn* Bot;
    FLOAT ReturnValue;
};
class ENGINE_API AInventory : public AVisible
{
public:
    BYTE ItemType;
    BYTE AutoSwitchPriority;
    BYTE InventoryGroup;
    BITFIELD bActivatable:1 GCC_PACK(4);
    BITFIELD bDisplayableInv:1;
    BITFIELD bActive:1;
    BITFIELD bSleepTouch:1;
    BITFIELD bHeldItem:1;
    BITFIELD bTossedOut:1;
    BITFIELD bHaveTokens:1;
    FName ConditionalEvent GCC_PACK(4);
    BITFIELD bActiveToggle:1 GCC_PACK(4);
    BITFIELD bAmbientGlow:1;
    BITFIELD bInstantRespawn:1;
    BITFIELD bRotatingPickup:1;
    FStringNoInit PickupMessage GCC_PACK(4);
    FStringNoInit ItemName;
    FStringNoInit ItemArticle;
    FLOAT RespawnTime;
    FName PlayerLastTouched;
    FVector PlayerViewOffset;
    class UMesh* PlayerViewMesh;
    FLOAT PlayerViewScale;
    FLOAT BobDamping;
    class UMesh* PickupViewMesh;
    FLOAT PickupViewScale;
    class UMesh* ThirdPersonMesh;
    FLOAT ThirdPersonScale;
    class UTexture* StatusIcon;
    FName ProtectionType1;
    FName ProtectionType2;
    INT Charge;
    INT ArmorAbsorption;
    BITFIELD bIsAnArmor:1 GCC_PACK(4);
    INT AbsorptionPriority GCC_PACK(4);
    class AInventory* NextArmor;
    FLOAT MaxDesireability;
    class AInventorySpot* myMarker;
    FRotator AutoAimDir;
    BITFIELD bSteadyFlash3rd:1 GCC_PACK(4);
    BITFIELD bFirstFrame:1;
    BITFIELD bMuzzleFlashParticles:1;
    BITFIELD bToggleSteadyFlash:1;
    BITFIELD bSteadyToggle:1;
    BYTE FlashCount GCC_PACK(4);
    BYTE OldFlashCount;
    BYTE MuzzleFlashStyle;
    class UMesh* MuzzleFlashMesh;
    FLOAT MuzzleFlashScale;
    class UTexture* MuzzleFlashTexture;
    class USound* PickupSound;
    class USound* ActivateSound;
    class USound* DeactivateSound;
    class USound* RespawnSound;
    class UTexture* Icon;
    FStringNoInit M_Activated;
    FStringNoInit M_Selected;
    FStringNoInit M_Deactivated;
    class UClass* PickupMessageClass;
    class UClass* ItemMessageClass;
    void eventLoadGameAdd(class APawn* Player)
    {
        AInventory_eventLoadGameAdd_Parms Parms;
        Parms.Player=Player;
        ProcessEvent(FindFunctionChecked(ENGINE_LoadGameAdd),&Parms);
    }
    FLOAT eventBotDesireability(class APawn* Bot)
    {
        AInventory_eventBotDesireability_Parms Parms;
        Parms.Bot=Bot;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_BotDesireability),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AInventory,AVisible,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventory)
};


class ENGINE_API APickup : public AInventory
{
public:
    class AInventory* inv;
    INT NumCopies;
    BITFIELD bCanHaveMultipleCopies:1 GCC_PACK(4);
    BITFIELD bCanActivate:1;
    FStringNoInit ExpireMessage GCC_PACK(4);
    BITFIELD bAutoActivate:1 GCC_PACK(4);
    DECLARE_CLASS(APickup,AInventory,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APickup)
};


class ENGINE_API AAmmo : public APickup
{
public:
    INT AmmoAmount;
    INT MaxAmmo;
    class UClass* ParentAmmo;
    BYTE UsedInWeaponSlot[10];
    class USound* ExplodeSound;
    class UClass* ExplosionDecal;
    class AAmmo* PAmmo;
    DECLARE_CLASS(AAmmo,APickup,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmmo)
};


struct ASpell_eventOwnerDead_Parms
{
};
class ENGINE_API ASpell : public AInventory
{
public:
    INT CastingLevel;
    INT LocalCastingLevel;
    INT amplitudeBonus;
    INT manaCostPerLevel[6];
    INT damagePerLevel[6];
    BITFIELD bInControl:1 GCC_PACK(4);
    BITFIELD bPassControl:1;
    FLOAT MaxTargetRange GCC_PACK(4);
    BITFIELD bPointing:1 GCC_PACK(4);
    BITFIELD bInstantHit:1;
    BITFIELD bWaterFire:1;
    BITFIELD bWarnTarget:1;
    BITFIELD bSpellUp:1;
    BITFIELD bChangeSpell:1;
    BITFIELD bSplashDamage:1;
    BITFIELD bRecommendSplashDamage:1;
    BITFIELD bOwnsCrosshair:1;
    BITFIELD bHideSpell:1;
    FVector FireOffset GCC_ALIGN(16);
    class UClass* ProjectileClass;
    FName MyDamageType;
    FLOAT ProjectileSpeed;
    FLOAT aimerror;
    FLOAT shakemag;
    FLOAT shaketime;
    FLOAT shakevert;
    FLOAT AIRating;
    FLOAT RefireRate;
    FLOAT Accuracy;
    FLOAT ExtraFireDelay;
    FLOAT ExtraSpellUpDelay;
    FLOAT ExtraSpellDownDelay;
    class USound* FireSound;
    class USound* FizzleSound;
    class USound* SelectSound;
    class USound* Misc1Sound;
    class USound* Misc2Sound;
    class USound* Misc3Sound;
    FStringNoInit MessageNoMana;
    FStringNoInit DeathMessage;
    FRotator AdjustedAim;
    BITFIELD bFiring:1 GCC_PACK(4);
    BITFIELD bSetFlashTime:1;
    BITFIELD bDrawMuzzleFlash:1;
    BYTE bMuzzleFlash GCC_PACK(4);
    FLOAT FlashTime;
    FLOAT MuzzleScale;
    FLOAT FlashY;
    FLOAT FlashO;
    FLOAT FlashC;
    FLOAT FlashLength;
    INT FlashS;
    class UTexture* MFTexture;
    class UTexture* MuzzleFlare;
    FLOAT FlareOffset;
    void eventOwnerDead()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OwnerDead),NULL);
    }
    DECLARE_CLASS(ASpell,AInventory,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASpell)
};


class ENGINE_API AWeapon : public AInventory
{
public:
    FLOAT MaxTargetRange;
    class UClass* AmmoName;
    class UClass* AltAmmoName;
    BYTE ReloadCount;
    INT PickupAmmoCount;
    class AAmmo* AmmoType;
    BITFIELD bPointing:1 GCC_PACK(4);
    BITFIELD bInstantHit:1;
    BITFIELD bWarnTarget:1;
    BITFIELD bAltWarnTarget:1;
    BITFIELD bWeaponUp:1;
    BITFIELD bChangeWeapon:1;
    BITFIELD bLockedOn:1;
    BITFIELD bSplashDamage:1;
    BITFIELD bRecommendSplashDamage:1;
    BITFIELD bRecommendAltSplashDamage:1;
    BITFIELD bWeaponStay:1;
    BITFIELD bOwnsCrosshair:1;
    BITFIELD bHideWeapon:1;
    BITFIELD bMeleeWeapon:1;
    BITFIELD bRapidFire:1;
    BITFIELD bSpecialIcon:1;
    FLOAT FiringSpeed GCC_PACK(4);
    FVector FireOffset;
    class UClass* ProjectileClass;
    class UClass* AltProjectileClass;
    FName MyDamageType;
    FName AltDamageType;
    FLOAT ProjectileSpeed;
    FLOAT AltProjectileSpeed;
    FLOAT aimerror;
    FLOAT shakemag;
    FLOAT shaketime;
    FLOAT shakevert;
    FLOAT AIRating;
    FLOAT RefireRate;
    FLOAT Accuracy;
    class USound* FireSound;
    class USound* AltFireSound;
    class USound* CockingSound;
    class USound* SelectSound;
    class USound* Misc1Sound;
    class USound* Misc2Sound;
    class USound* Misc3Sound;
    FStringNoInit MessageNoAmmo;
    FStringNoInit DeathMessage;
    FColor NameColor;
    FRotator AdjustedAim;
    BITFIELD bAltAmmo:1 GCC_PACK(4);
    BITFIELD bSetFlashTime:1;
    BITFIELD bDrawMuzzleFlash:1;
    BYTE bMuzzleFlash GCC_PACK(4);
    FLOAT FlashTime;
    FLOAT MuzzleScale;
    FLOAT FlashY;
    FLOAT FlashX;
    FLOAT FlashLength;
    class UTexture* MFTexture0;
    class UTexture* MFTexture1;
    BYTE FlashStyle0;
    BYTE FlashStyle1;
    DECLARE_CLASS(AWeapon,AInventory,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWeapon)
};


struct ADecal_eventUpdate_Parms
{
    class AActor* L;
};
class ENGINE_API ADecal : public AVisible
{
public:
    FLOAT Priority;
    FLOAT DecalLifetime;
    FLOAT FadeTime;
    BITFIELD bAlwaysVisible:1 GCC_PACK(4);
    INT MultiDecalLevel GCC_PACK(4);
    FLOAT LastRenderedTime;
    FLOAT Age;
    FLOAT AgePct;
    TArray<INT> SurfList;
    DECLARE_FUNCTION(execDetachDecal);
    DECLARE_FUNCTION(execAttachDecal);
    void eventUpdate(class AActor* L)
    {
        ADecal_eventUpdate_Parms Parms;
        Parms.L=L;
        ProcessEvent(FindFunctionChecked(ENGINE_Update),&Parms);
    }
    DECLARE_CLASS(ADecal,AVisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecal)
};


class ENGINE_API ADecoration : public AVisible
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1 GCC_PACK(4);
    BITFIELD bOnlyTriggerable:1;
    BITFIELD bSplash:1;
    BITFIELD bBobbing:1;
    BITFIELD bWasCarried:1;
    class USound* PushSound GCC_PACK(4);
    INT numLandings;
    class UClass* SpawnCreature;
    class UClass* contents;
    class UClass* content2;
    class UClass* content3;
    class USound* EndPushSound;
    BITFIELD bPushSoundPlaying:1 GCC_PACK(4);
    class USound* DestroySound[3] GCC_PACK(4);
    INT SoundID;
    DECLARE_CLASS(ADecoration,AVisible,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};


class ENGINE_API ACarcass : public ADecoration
{
public:
    BITFIELD bPlayerCarcass:1 GCC_PACK(4);
    BYTE flies GCC_PACK(4);
    BYTE rats;
    BITFIELD bReducedHeight:1 GCC_PACK(4);
    BITFIELD bDecorative:1;
    BITFIELD bSlidingCarcass:1;
    INT CumulativeDamage GCC_PACK(4);
    class APlayerReplicationInfo* PlayerOwner;
    class APawn* Bugs;
    DECLARE_CLASS(ACarcass,ADecoration,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ACarcass)
};


class ENGINE_API AProjectile : public AVisible
{
public:
    BITFIELD bCanHitInstigator:1 GCC_PACK(4);
    BITFIELD bHasBeenReflected:1;
    FLOAT Speed GCC_PACK(4);
    FLOAT MaxSpeed;
    FLOAT Damage;
    INT MomentumTransfer;
    FName MyDamageType;
    FStringNoInit MyDamageString;
    BITFIELD bMagical:1 GCC_PACK(4);
    class USound* SpawnSound GCC_PACK(4);
    class USound* ProjImpactSound;
    class USound* PawnImpactSound;
    class USound* MiscSound;
    FLOAT ExploWallOut;
    class UClass* ExplosionDecal;
    class UClass* GlassStrikeDecal;
    FVector spawnLoc;
    class USound* RicochetSounds[3];
    FVector EnterWaterLocation;
    FLOAT HeadShotMult;
    DECLARE_CLASS(AProjectile,AVisible,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};


class ENGINE_API UPrimitive : public UObject
{
public:
    FBox BoundingBox;
    FSphere BoundingSphere;
    DECLARE_CLASS(UPrimitive,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPrimitive)
};

#define UCONST_MF_HAS_LOD_DISTANCE 0x10000000
#define UCONST_MF_UNK 0x00000001

class ENGINE_API UMesh : public UPrimitive
{
public:
    INT Tris_vtableptr;
    INT Tris_SavedAr;
    INT Tris_SavedPos;
    TArray<BYTE> Tris;
    TArray<class UTexture*> Textures;
    TArray<FLOAT> TextureLOD;
    INT MRMMeshData;
    INT NumVerts;
    INT NumNormals;
    INT Unk1;
    INT Unk2;
    INT flags;
    INT AnimData;
    DECLARE_CLASS(UMesh,UPrimitive,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMesh)
};


class ENGINE_API USkelMesh : public UMesh
{
public:
    INT SkelProto;
    TArray<BYTE> Joints;
    TArray<BYTE> JointLocs;
    INT JointVerts_vtableptr;
    INT JointVerts_SavedAr;
    INT JointVerts_SavedPos;
    TArray<BYTE> JointVerts;
    TArray<BYTE> PhysObj;
    class USkelMesh* ParentMesh;
    FPlace Origin;
    DECLARE_CLASS(USkelMesh,UMesh,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USkelMesh)
};


class ENGINE_API USoundContainer : public UObject
{
public:
    DECLARE_CLASS(USoundContainer,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USoundContainer)
};


class ENGINE_API UImpactSoundSet : public USoundContainer
{
public:
    FImpactSoundEntry Default;
    FImpactSoundEntry Glass;
    FImpactSoundEntry Water;
    FImpactSoundEntry Leaves;
    FImpactSoundEntry Snow;
    FImpactSoundEntry Grass;
    FImpactSoundEntry Organic;
    FImpactSoundEntry Carpet;
    FImpactSoundEntry Earth;
    FImpactSoundEntry Sand;
    FImpactSoundEntry WoodHollow;
    FImpactSoundEntry WoodSolid;
    FImpactSoundEntry Stone;
    FImpactSoundEntry Metal;
    FImpactSoundEntry Extra1;
    FImpactSoundEntry Extra2;
    FImpactSoundEntry Extra3;
    FImpactSoundEntry Extra4;
    FImpactSoundEntry Extra5;
    FImpactSoundEntry Extra6;
    DECLARE_CLASS(UImpactSoundSet,USoundContainer,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UImpactSoundSet)
};


class ENGINE_API UFootSoundSet : public USoundContainer
{
public:
    FFootSoundEntry Default;
    FFootSoundEntry Glass;
    FFootSoundEntry Water;
    FFootSoundEntry Leaves;
    FFootSoundEntry Snow;
    FFootSoundEntry Grass;
    FFootSoundEntry Organic;
    FFootSoundEntry Carpet;
    FFootSoundEntry Earth;
    FFootSoundEntry Sand;
    FFootSoundEntry WoodHollow;
    FFootSoundEntry WoodSolid;
    FFootSoundEntry Stone;
    FFootSoundEntry Metal;
    FFootSoundEntry Extra1;
    FFootSoundEntry Extra2;
    FFootSoundEntry Extra3;
    FFootSoundEntry Extra4;
    FFootSoundEntry Extra5;
    FFootSoundEntry Extra6;
    DECLARE_CLASS(UFootSoundSet,USoundContainer,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFootSoundSet)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit IdealPlayerCount;
    INT RecommendedEnemies;
    INT RecommendedTeammates;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevelSummary)
};


class ENGINE_API UModifier : public UObject
{
public:
    DECLARE_CLASS(UModifier,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UModifier)
};


class ENGINE_API UCloth : public UModifier
{
public:
    FLOAT StiffnessStretch;
    FLOAT StiffnessFlex;
    FLOAT StiffnessShape;
    FLOAT Damping;
    FLOAT Drag;
    FLOAT Friction;
    FLOAT GravityScale;
    FVector LocalWind;
    BITFIELD CollideMesh:1 GCC_PACK(4);
    BITFIELD CollideWorld:1;
    FVector FixDir GCC_ALIGN(16);
    FLOAT Step;
    DECLARE_CLASS(UCloth,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCloth)
};


class ENGINE_API URope : public UCloth
{
public:
    BITFIELD AffectRoot:1 GCC_PACK(4);
    DECLARE_CLASS(URope,UCloth,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(URope)
};

#endif

AUTOGENERATE_FUNCTION(AWind,425,execGetWind);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,-1,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,542,execUnloadTexture);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,400,execPlayImpactSound);
AUTOGENERATE_FUNCTION(AActor,402,execFinishSound);
AUTOGENERATE_FUNCTION(AActor,-1,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,-1,execDemoPlaySound);
AUTOGENERATE_FUNCTION(AActor,-1,execPlayOwnedSound);
AUTOGENERATE_FUNCTION(AActor,265,execStopSound);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,285,execTraceTexture);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,417,execSetLimbTangible);
AUTOGENERATE_FUNCTION(AActor,421,execApplyMod);
AUTOGENERATE_FUNCTION(AActor,410,execDetachLimb);
AUTOGENERATE_FUNCTION(AActor,409,execDestroyLimb);
AUTOGENERATE_FUNCTION(AActor,426,execAddDynamic);
AUTOGENERATE_FUNCTION(AActor,408,execClearTargets);
AUTOGENERATE_FUNCTION(AActor,407,execClearTarget);
AUTOGENERATE_FUNCTION(AActor,406,execAddTargetRot);
AUTOGENERATE_FUNCTION(AActor,405,execAddTargetPos);
AUTOGENERATE_FUNCTION(AActor,424,execApplyAnim);
AUTOGENERATE_FUNCTION(AActor,423,execGetNotifyTime);
AUTOGENERATE_FUNCTION(AActor,422,execListAnims);
AUTOGENERATE_FUNCTION(AActor,420,execAnimMoveRate);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,293,execGetAnimGroup);
AUTOGENERATE_FUNCTION(AActor,292,execIsAnimResting);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,274,execPlayAnimSound);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,416,execJointParent);
AUTOGENERATE_FUNCTION(AActor,415,execStaticJointDir);
AUTOGENERATE_FUNCTION(AActor,414,execJointPlace);
AUTOGENERATE_FUNCTION(AActor,413,execJointIndex);
AUTOGENERATE_FUNCTION(AActor,412,execJointName);
AUTOGENERATE_FUNCTION(AActor,411,execNumJoints);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,322,execResetLightCache);
AUTOGENERATE_FUNCTION(AActor,321,execLoadTextureFromBMP);
AUTOGENERATE_FUNCTION(AActor,334,execGetTexture);
AUTOGENERATE_FUNCTION(AActor,313,execSetTexture);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,2032,execGetSaveGameList);
AUTOGENERATE_FUNCTION(AActor,2006,execGetSaveGameSize);
AUTOGENERATE_FUNCTION(AActor,2005,execLoadGame);
AUTOGENERATE_FUNCTION(AActor,2004,execSaveGame);
AUTOGENERATE_FUNCTION(AActor,2003,execLoadGameFromMemoryCard);
AUTOGENERATE_FUNCTION(AActor,2002,execSaveGameToMemoryCard);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,2034,execGUIExit);
AUTOGENERATE_FUNCTION(APlayerPawn,2033,execGUIEnter);
AUTOGENERATE_FUNCTION(APlayerPawn,2012,execRunActuator);
AUTOGENERATE_FUNCTION(APlayerPawn,2011,execActivateActuator);
AUTOGENERATE_FUNCTION(APlayerPawn,2010,execGetNoActuators);
AUTOGENERATE_FUNCTION(APlayerPawn,2009,execResetAct);
AUTOGENERATE_FUNCTION(APlayerPawn,2008,execInitAct);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerPawn,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerPawn,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerPawn,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APawn,-1,execClientHearSound);
AUTOGENERATE_FUNCTION(APawn,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(APawn,537,execPlaySound_P);
AUTOGENERATE_FUNCTION(APawn,404,execPlayFootSound);
AUTOGENERATE_FUNCTION(APawn,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(APawn,531,execPickTarget);
AUTOGENERATE_FUNCTION(APawn,530,execRemovePawn);
AUTOGENERATE_FUNCTION(APawn,529,execAddPawn);
AUTOGENERATE_FUNCTION(APawn,540,execFindBestInventoryPath);
AUTOGENERATE_FUNCTION(APawn,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(APawn,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APawn,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(APawn,520,execactorReachable);
AUTOGENERATE_FUNCTION(APawn,521,execpointReachable);
AUTOGENERATE_FUNCTION(APawn,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(APawn,522,execClearPaths);
AUTOGENERATE_FUNCTION(APawn,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(APawn,517,execFindPathToward);
AUTOGENERATE_FUNCTION(APawn,518,execFindPathTo);
AUTOGENERATE_FUNCTION(APawn,516,execPopRouteCache);
AUTOGENERATE_FUNCTION(APawn,533,execCanSee);
AUTOGENERATE_FUNCTION(APawn,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(APawn,513,execRotateToView);
AUTOGENERATE_FUNCTION(APawn,510,execTurnToward);
AUTOGENERATE_FUNCTION(APawn,508,execTurnTo);
AUTOGENERATE_FUNCTION(APawn,506,execStrafeFacing);
AUTOGENERATE_FUNCTION(APawn,504,execStrafeTo);
AUTOGENERATE_FUNCTION(APawn,502,execMoveToward);
AUTOGENERATE_FUNCTION(APawn,500,execMoveTo);
AUTOGENERATE_FUNCTION(AParticleFX,435,execRecomputeDeltas);
AUTOGENERATE_FUNCTION(AParticleFX,434,execSetParticleParams);
AUTOGENERATE_FUNCTION(AParticleFX,433,execGetParticleParams);
AUTOGENERATE_FUNCTION(AParticleFX,432,execAddParticle);
AUTOGENERATE_FUNCTION(AParticleFX,431,execNumParticles);
AUTOGENERATE_FUNCTION(ADecal,-1,execDetachDecal);
AUTOGENERATE_FUNCTION(ADecal,-1,execAttachDecal);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLog,-1,execLogMutator);
AUTOGENERATE_FUNCTION(AStatLog,-1,execInitialCheck);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBrowseRelativeLocalURL);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteWorldLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBatchLocal);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteSilentLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteLocalLogBatcher);
AUTOGENERATE_FUNCTION(ANavigationPoint,519,execdescribeSpec);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,2001,execGetTotalWind);
AUTOGENERATE_FUNCTION(ALevelInfo,2000,execGetZone);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif NAMES_ONLY

#if _MSC_VER
#pragma pack (pop)
#endif
