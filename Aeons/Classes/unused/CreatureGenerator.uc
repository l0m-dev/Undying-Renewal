//=============================================================================
// CreatureGenerator.
//=============================================================================
class CreatureGenerator expands Generator;

#exec TEXTURE IMPORT NAME=CreatureGen FILE=CreatureGen.pcx GROUP=System Mips=On

//****************************************************************************
// This class in the base class for all creature generator classes.
//****************************************************************************


//****************************************************************************
// Member vars.
//****************************************************************************

struct GenCreatureInfo
{
	var() class<ScriptedPawn>	SpawnClass;		// Class of creature spawned.
	var() name				StartState;			// Startup state.
	var() name				StartTag;			// Startup tag.
	var() class<actor>		EffectClass;		// Class of effect spawned in conjunction with creature.
	var() float				PostEffectDelay;	// Delay after effect is spawned until creature is spawned.
};

var() name					StartActorTag;			// Event name to be set in the generated creature
var() name					StartEvent;			// Event name to be set in the generated creature
var() bool					bGroundPlacement;	// Calculate spawn point at height of spawning creature.
var savable bool			bInEffect;			// Generator waiting for effect time out.
var() savable bool			bRandomInterval;	// Generate randomly at specified interval.
var savable bool			bPendingEvent;		// Set when unable to generate when requested.
var() bool					bSpherical;			// Generation zone is spherical (not a cylinder).
var() savable bool			bTriggered;			// Generate by specified trigger.
var() bool					bTriggeredTimer;	// Trigger starts timer.
var() GenCreatureInfo		GenCreature[2];		// Creature(s) generated by this generator.
var() float					TimerInterval;		// Timer generation interval.
var() float					TimerRandom;		// Timer random factor.
var() float					GenRadius;			// Generation radius.
var savable int				GenCount;			// Count of creatures generated.
var() int					MaxAlive;			// Maximum alive at any time.
var() savable int			MaxGenerated;		// Maximum total creatures generated.
var savable vector			SpawnLocation;		// Where the spawn is happening.
var() bool					bCheckVisible;		// Don't generate if player can see generator.
var pawn					Player;				// The player.
var() float					TriggerDelay;		// Delay between trigger and activation.
var savable float			TriggerTimer;		// Actual delay between trigger and activation.
var() name					MasterTag;			// Tag of master generator;
var CreatureGenerator		MasterControl;		// Master generator.
var() name					GenLocationTag;		// Spawn at the location of this tagged actor.
var() float					CreatureShadowRange;

//****************************************************************************
// Inherited member funcs.
//****************************************************************************

// Called after creation (or spawning).
function PreBeginPlay()
{
	super.PreBeginPlay();
	if ( bRandomInterval && ( TimerInterval > 0.0 ) )
		SetTimer( FVariant( TimerInterval, TimerRandom ), false );
	if ( MaxGenerated == 0 )
		MaxGenerated = -1;
	if ( MasterTag != '' )
		MasterControl = FindMasterGen( MasterTag );
}

//
function Timer()
{
	GenerateEvent();
	if ( bRandomInterval && !bInEffect )
		SetTimer( FVariant( TimerInterval, TimerRandom ), false );
}

// Generator was triggered.
function Trigger( actor Other, pawn Instigator )
{
//	log( name $ ".Trigger(), Other is " $ Other.name $ " Instigator is " $ Instigator.name );
	if ( TriggerDelay > 0.0 )
	{
		if ( TriggerTimer <= 0.0 )
			TriggerTimer = TriggerDelay;
	}
	else
		DoTrigger();
}

//
function Tick( float DeltaTime )
{
	if ( TriggerTimer > 0.0 )
	{
		TriggerTimer -= DeltaTime;
		if ( TriggerTimer <= 0.0 )
			DoTrigger();
	}
	if ( bPendingEvent && !bInEffect )
		GenerateEvent();
}

//****************************************************************************
// New member funcs.
//****************************************************************************

// Find the first generator with the matching Tag property.
function CreatureGenerator FindMasterGen( name LinkTag )
{
	local CreatureGenerator		Gen;

	if ( LinkTag != '' )
	{
		foreach AllActors( class'CreatureGenerator', Gen, LinkTag )
			return Gen;
	}
	else
		return none;
}

//
function int GetMaxAlive()
{
	if ( MasterControl == none )
		return MaxAlive;
	else
		return MasterControl.MaxAlive;
}

//
function int GetGenCount()
{
	if ( MasterControl == none )
		return GenCount;
	else
		return MasterControl.GenCount;
}

//
function SetGenCount( int Count )
{
	if ( MasterControl == none )
		GenCount = Count;
	else
		MasterControl.GenCount = Count;
}

// Handle the Trigger event.
function DoTrigger()
{
	if ( bTriggered )
	{
		if ( bTriggeredTimer )
		{
			// Trigger once only.
			bTriggered = false;
			bRandomInterval = true;
			Timer();
		}
		else if ( !bInEffect )
		{
			// Don't allow triggers to be remembered.
			GenerateEvent();
			bPendingEvent = false;
		}
	}
}

// The generation event.
function GenerateEvent()
{
	local int	id;

	if ( Player == none )
		Player = FindPlayer();

	// Check if player can see generator.
	if ( bCheckVisible &&
		 ( Player != none ) &&
		 FastTrace( Location, Player.Location ) &&
		 ( ( (Player.Location - Location) dot vector(Player.ViewRotation) ) < 0.0 ) )
	{
		bPendingEvent = true;
		return;
	}

	id = 0;
	if ( !bInEffect )
	{
		if ( ( MaxGenerated != 0 ) &&
			 ( GetGenCount() < GetMaxAlive() ) &&
			 ( GenCreature[id].SpawnClass != none ) )
		{
			bPendingEvent = false;
			SpawnLocation = GetSpawnPoint( GenCreature[id].SpawnClass );
			if ( GenCreature[id].EffectClass != none )
			{
				SpawnEffect( GenCreature[id].EffectClass );
				if ( GenCreature[id].PostEffectDelay > 0.0 )
				{
					SetTimer( GenCreature[id].PostEffectDelay, false );
					bInEffect = true;
					return;
				}
			}
		}
		else
		{
			bPendingEvent = true;
			return;
		}
	}
	SpawnCreature( GenCreature[id].SpawnClass, GenCreature[id] );
	bInEffect = false;
}

// Calculate a spawn point.
function vector GetSpawnPoint( class<ScriptedPawn> classID )
{
	local vector			sPoint;
	local rotator			rRot;
	local vector			rVect;
	local vector			GenLocation;
	local actor				AActor;

	GenLocation = Location;

	if ( GenLocationTag != '' )
		foreach AllActors( class'actor', AActor, GenLocationTag )
		{
			GenLocation = AActor.Location;
			break;
		}
	if ( GenRadius > 0.0 )
	{
		rRot.Yaw = 65536 * FRand();
		if ( bSpherical && !bGroundPlacement )
			rRot.Pitch = 16384 * FRand();
		else
			rRot.Pitch = 0;
		rRot.Roll = 0;
		rVect = vector(rRot) * GenRadius * FRand();
	}
	else
		rVect = vect(0,0,0);
	if ( bGroundPlacement )
		sPoint = CalcGroundPoint( GenLocation + rVect, classID.default.CollisionHeight );
	else
		sPoint = GenLocation + rVect;
	return sPoint;
}

// Spawn a creature into the level.
function ScriptedPawn SpawnCreature( class<ScriptedPawn> classID, GenCreatureInfo CInfo )
{
	local ScriptedPawn		lPawn;

	lPawn = Spawn( classID, self,, SpawnLocation, Rotation );
	if ( lPawn != none )
	{
//		log( name $ " spawned " $ lPawn.name );
		lPawn.bGenerated = true;
		lPawn.OrderState = CInfo.StartState;
		lPawn.OrderTag = CInfo.StartTag;
		if ( StartActorTag != 'none' )
			lPawn.Tag = StartActorTag;
		if ( CreatureShadowRange > 0.0 )
			lPawn.ShadowRange = CreatureShadowRange;
		else if ( CreatureShadowRange < 0.0 )
			lPawn.ShadowImportance = 0.0;
		lPawn.SetInitialState();
		lPawn.Event = StartEvent;
		lPawn.Generated();
		SetGenCount( GetGenCount() + 1 );
		MaxGenerated -= 1;
	}
	return lPawn;
}

// Spawn a spawn effect into the level.
function SpawnEffect( class<actor> classID )
{
	local actor		lActor;

	lActor = Spawn( classID, self,, SpawnLocation, Rotation );
}

// Calculate a semi-valid point based on the location and height passed.
function vector CalcGroundPoint( vector thisLocation, float thisHeight )
{
	local actor		HitActor;
	local vector	HitLocation, HitNormal;
	local int		HitJoint;

	HitActor = Trace( HitLocation, HitNormal, HitJoint, thisLocation + vect(0,0,-500), thisLocation, false );
	return HitLocation + ( vect(0,0,1) * thisHeight );
}

// Called when a creature generated by this generator is killed.
function GenCreatureKilled( ScriptedPawn creature )
{
	if ( GetGenCount() > 0 )
		SetGenCount( GetGenCount() - 1 );	//GenCount -= 1;
	if ( bPendingEvent && !bInEffect )
		GenerateEvent();
}

// Locate the player pawn.
function pawn FindPlayer()
{
	local pawn	LPawn;

	LPawn = Level.PawnList;
	while ( LPawn != none )
	{
		if ( LPawn.bIsPlayer )
			return LPawn;
		LPawn = LPawn.NextPawn;
	}
	return none;
}

//****************************************************************************
// Def props.
//****************************************************************************

defaultproperties
{
     bGroundPlacement=True
     bTriggered=True
     bSavable=True
     Texture=Texture'Aeons.System.CreatureGen'
}
